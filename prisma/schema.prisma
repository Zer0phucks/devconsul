// Prisma Schema for Full Self Publishing Platform
// Database provider: PostgreSQL (Supabase/Neon compatible)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String? // For credentials auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences and settings
  preferences Json? // Flexible JSON for UI preferences, themes, etc.
  timezone    String  @default("UTC")
  isActive    Boolean @default(true)

  // Relationships
  accounts Account[]
  projects Project[]
  settings Settings[]
  sessions Session[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

// NextAuth account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

// NextAuth session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// NextAuth verification token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// PROJECT MANAGEMENT
// ============================================

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // GitHub Integration
  githubRepoUrl   String?
  githubRepoOwner String?
  githubRepoName  String?
  githubBranch    String?   @default("main")
  githubWebhookId String? // Store webhook ID for cleanup
  lastSyncedAt    DateTime?
  syncEnabled     Boolean   @default(false)

  // Project metadata
  status     ProjectStatus @default(ACTIVE)
  visibility Visibility    @default(PRIVATE)
  tags       String[] // Array of tags for categorization
  metadata   Json? // Flexible metadata storage

  // Relationships
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  platforms      Platform[]
  content        Content[]
  settings       Settings[]
  cronJobs       CronJob[]
  emailCampaigns EmailCampaign[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([githubRepoOwner, githubRepoName])
  @@map("projects")
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

// ============================================
// PLATFORM INTEGRATIONS
// ============================================

model Platform {
  id        String       @id @default(cuid())
  projectId String
  type      PlatformType
  name      String // Custom name for this platform connection
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // OAuth & API credentials (encrypted in production)
  accessToken    String?   @db.Text
  refreshToken   String?   @db.Text
  tokenExpiresAt DateTime?
  apiKey         String?   @db.Text
  apiSecret      String?   @db.Text

  // Platform-specific configuration
  config Json? // Platform-specific settings (RSS URL, webhook URLs, etc.)

  // Connection status
  isConnected     Boolean   @default(false)
  lastConnectedAt DateTime?
  lastErrorAt     DateTime?
  lastError       String?   @db.Text

  // Publishing stats
  totalPublished  Int       @default(0)
  lastPublishedAt DateTime?

  // Relationships
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  publications ContentPublication[]

  @@unique([projectId, type]) // One platform type per project
  @@index([projectId])
  @@index([type])
  @@index([isConnected])
  @@map("platforms")
}

enum PlatformType {
  HASHNODE
  DEVTO
  MEDIUM
  LINKEDIN
  TWITTER
  FACEBOOK
  REDDIT
  RSS_FEED
  NEWSLETTER
  RESEND
  SENDGRID
  MAILCHIMP
  WORDPRESS
  GHOST
  WEBHOOK
}

// ============================================
// CONTENT MANAGEMENT
// ============================================

model Content {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Source content (from GitHub)
  sourceType      ContentSourceType
  sourcePath      String? // GitHub file path
  sourceCommitSha String? // Git commit SHA for tracking

  // Content data
  title       String
  slug        String?
  excerpt     String? @db.Text
  body        String  @db.Text
  rawContent  String  @db.Text // Original markdown/content
  htmlContent String? @db.Text // Rendered HTML

  // Metadata
  tags         String[]
  categories   String[]
  coverImage   String?
  canonicalUrl String?

  // Content status
  status       ContentStatus @default(DRAFT)
  publishedAt  DateTime?
  scheduledFor DateTime?

  // AI generation metadata
  isAIGenerated Boolean @default(false)
  aiModel       String?
  aiPrompt      String? @db.Text
  aiMetadata    Json?

  // Version control
  version  Int       @default(1)
  parentId String? // For content versions
  parent   Content?  @relation("ContentVersions", fields: [parentId], references: [id])
  versions Content[] @relation("ContentVersions")

  // Relationships
  project          Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  publications     ContentPublication[]
  contentImages    ContentImage[]
  scheduledContent ScheduledContent[]
  approvals        ContentApproval[]
  safetyChecks     ContentSafetyCheck[]
  versionHistory   ContentVersion[]     @relation("ContentVersionHistory")

  @@index([projectId])
  @@index([status])
  @@index([publishedAt])
  @@index([scheduledFor])
  @@index([sourceCommitSha])
  @@index([createdAt])
  @@map("content")
}

enum ContentSourceType {
  GITHUB_MARKDOWN
  GITHUB_MDX
  AI_GENERATED
  MANUAL
  IMPORT
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}

// Content publication tracking (many-to-many with platforms)
model ContentPublication {
  id         String   @id @default(cuid())
  contentId  String
  platformId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Publication details
  publishedAt    DateTime?
  platformPostId String? // ID from the platform (e.g., Hashnode post ID)
  platformUrl    String? // Direct URL to published content

  // Status
  status        PublicationStatus @default(PENDING)
  error         String?           @db.Text
  retryCount    Int               @default(0)
  lastAttemptAt DateTime?

  // Platform-specific metadata
  platformMetadata Json?

  // Relationships
  content  Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  platform Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([contentId, platformId])
  @@index([contentId])
  @@index([platformId])
  @@index([status])
  @@index([publishedAt])
  @@map("content_publications")
}

enum PublicationStatus {
  PENDING
  PUBLISHING
  PUBLISHED
  FAILED
  RETRYING
}

// ============================================
// SETTINGS & CONFIGURATION
// ============================================

model Settings {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Settings scope
  scope SettingsScope @default(PROJECT)

  // Content generation settings
  contentPreferences Json? // AI model, tone, style, length preferences

  // Publishing automation
  autoPublish    Boolean @default(false)
  publishDelay   Int? // Minutes to wait before auto-publishing
  contentFilters Json? // Filters for which content to publish

  // Scheduling settings
  cronFrequency      String? // Cron expression for content checks
  timezone           String  @default("UTC")
  publishingSchedule Json? // Preferred publishing times

  // Notification settings
  emailNotifications Boolean  @default(true)
  webhookUrl         String?
  notificationEvents String[] // Array of events to notify about

  // Advanced settings
  customSettings Json? // Flexible key-value storage

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, scope])
  @@index([userId])
  @@index([projectId])
  @@map("settings")
}

enum SettingsScope {
  USER
  PROJECT
  PLATFORM
}

// ============================================
// CRON JOBS & AUTOMATION
// ============================================

model CronJob {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Job configuration
  name        String
  description String?     @db.Text
  type        CronJobType
  schedule    String // Cron expression
  timezone    String      @default("UTC")

  // Job status
  isEnabled Boolean       @default(true)
  status    CronJobStatus @default(IDLE)

  // Execution tracking
  lastRunAt    DateTime?
  lastSuccess  DateTime?
  lastFailure  DateTime?
  nextRunAt    DateTime?
  runCount     Int       @default(0)
  successCount Int       @default(0)
  failureCount Int       @default(0)

  // Error handling
  maxRetries Int @default(3)
  retryDelay Int @default(300) // Seconds

  // Job configuration
  config Json? // Job-specific configuration

  // Relationships
  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  executions CronExecution[]

  @@index([projectId])
  @@index([isEnabled])
  @@index([status])
  @@index([nextRunAt])
  @@index([type])
  @@map("cron_jobs")
}

enum CronJobType {
  SYNC_GITHUB // Sync content from GitHub
  PUBLISH_CONTENT // Auto-publish scheduled content
  GENERATE_CONTENT // AI content generation
  CLEANUP // Database cleanup
  ANALYTICS // Generate analytics
  CUSTOM // User-defined job
}

enum CronJobStatus {
  IDLE
  RUNNING
  COMPLETED
  FAILED
  DISABLED
}

// Cron job execution logs
model CronExecution {
  id        String   @id @default(cuid())
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Execution details
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  duration    Int? // Milliseconds

  // Status
  status     ExecutionStatus @default(RUNNING)
  error      String?         @db.Text
  stackTrace String?         @db.Text

  // Execution metadata
  triggeredBy String? // manual, scheduled, webhook
  metadata    Json?

  // Execution results
  itemsProcessed Int?
  itemsSuccess   Int?
  itemsFailed    Int?
  output         Json? // Execution output/results

  // Relationships
  job CronJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
  @@index([startedAt])
  @@index([createdAt])
  @@map("cron_executions")
}

enum ExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

// ============================================
// AUDIT & ANALYTICS
// ============================================

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Actor information
  userId    String?
  userEmail String?
  ipAddress String?
  userAgent String? @db.Text

  // Action details
  action     String // create, update, delete, publish, etc.
  resource   AuditResource
  resourceId String

  // Changes
  oldValues Json?
  newValues Json?
  metadata  Json?

  // Context
  projectId  String?
  platformId String?

  @@index([userId])
  @@index([resource, resourceId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

enum AuditResource {
  USER
  PROJECT
  PLATFORM
  CONTENT
  SETTINGS
  CRON_JOB
  EMAIL_CAMPAIGN
}

// ============================================
// EMAIL PLATFORMS & CAMPAIGNS
// ============================================

model EmailCampaign {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campaign details
  name      String
  subject   String
  fromEmail String
  fromName  String?
  replyTo   String?

  // Content
  templateId  String? // Reference to email template
  htmlContent String  @db.Text
  textContent String? @db.Text

  // Campaign metadata
  tags     String[]
  metadata Json?

  // Status
  status      EmailCampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?

  // Stats
  totalRecipients   Int @default(0)
  totalSent         Int @default(0)
  totalDelivered    Int @default(0)
  totalOpened       Int @default(0)
  totalClicked      Int @default(0)
  totalBounced      Int @default(0)
  totalUnsubscribed Int @default(0)

  // Platform (which email service to use)
  emailProvider EmailProvider @default(RESEND)
  platformId    String? // Reference to Platform if using platform config

  // Relationships
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recipients  EmailRecipient[]
  emailImages EmailImage[]

  @@index([projectId])
  @@index([status])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([emailProvider])
  @@map("email_campaigns")
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
  FAILED
}

enum EmailProvider {
  RESEND
  SENDGRID
  MAILCHIMP
}

model EmailRecipient {
  id         String   @id @default(cuid())
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Recipient details
  email        String
  name         String?
  customFields Json? // Additional merge fields

  // Tracking token (for unsubscribe, opens, clicks)
  token String @unique @default(cuid())

  // Status
  status         EmailRecipientStatus @default(PENDING)
  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  unsubscribedAt DateTime?

  // Tracking
  openCount  Int @default(0)
  clickCount Int @default(0)

  // Bounce/error info
  bounceType String? // hard, soft, spam
  errorMsg   String? @db.Text

  // Relationships
  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([email])
  @@index([token])
  @@index([status])
  @@map("email_recipients")
}

enum EmailRecipientStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

// Global unsubscribe list (cross-project)
model EmailUnsubscribe {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  email          String   @unique
  unsubscribedAt DateTime @default(now())

  // Reason
  reason String? @db.Text

  // Source (which campaign/project they unsubscribed from)
  projectId  String?
  campaignId String?

  // Token used to unsubscribe
  token String?

  // User can re-subscribe
  isActive       Boolean   @default(true)
  resubscribedAt DateTime?

  @@index([email])
  @@index([isActive])
  @@index([projectId])
  @@map("email_unsubscribes")
}

// Email templates
model EmailTemplate {
  id        String   @id @default(cuid())
  projectId String? // null = global template
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Template details
  name        String
  description String? @db.Text
  subject     String? // Default subject

  // Content
  htmlContent String  @db.Text
  textContent String? @db.Text

  // Template type
  type EmailTemplateType @default(CUSTOM)

  // Variables/merge tags this template uses
  variables String[] // e.g., ["name", "content", "unsubscribe"]

  // Template metadata
  category String?
  tags     String[]
  isPublic Boolean  @default(false)

  @@index([projectId])
  @@index([type])
  @@index([isPublic])
  @@map("email_templates")
}

enum EmailTemplateType {
  NEWSLETTER
  ANNOUNCEMENT
  DIGEST
  PLAIN
  CUSTOM
}

// ============================================
// CONTENT TEMPLATES & CUSTOMIZATION
// ============================================

// Universal content templates for all platforms
model Template {
  id        String   @id @default(cuid())
  projectId String? // null = global/default template
  userId    String? // Template creator
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Template details
  name        String
  description String?          @db.Text
  platform    TemplatePlatform
  category    String? // e.g., "technical", "announcement", "tutorial"

  // Template content with variable placeholders
  content String  @db.Text // Template body with {{variables}}
  subject String? // For email/newsletter templates

  // Template metadata
  variables String[] // List of available variables: ["repository", "activity", "date"]
  tags      String[]
  isDefault Boolean  @default(false) // System default template
  isPublic  Boolean  @default(false) // Shareable template

  // Version control
  version  Int        @default(1)
  parentId String? // For template versions
  parent   Template?  @relation("TemplateVersions", fields: [parentId], references: [id])
  versions Template[] @relation("TemplateVersions")

  // Usage analytics
  usageCount         Int       @default(0)
  lastUsedAt         DateTime?
  effectivenessScore Float? // A/B testing score

  // Relationships
  promptLibrary  PromptLibrary[]
  contentHistory ContentTemplateHistory[]

  @@index([projectId])
  @@index([userId])
  @@index([platform])
  @@index([category])
  @@index([isDefault])
  @@index([isPublic])
  @@index([usageCount])
  @@map("templates")
}

enum TemplatePlatform {
  BLOG
  EMAIL
  NEWSLETTER
  TWITTER
  LINKEDIN
  FACEBOOK
  REDDIT
  HASHNODE
  DEVTO
  MEDIUM
  WORDPRESS
  GHOST
  ALL // Universal template
}

// AI Prompt library for content generation
model PromptLibrary {
  id        String   @id @default(cuid())
  projectId String? // null = global/shared prompt
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Prompt details
  name        String
  description String?        @db.Text
  category    PromptCategory

  // Prompt content
  systemPrompt String @db.Text // System instructions for AI
  userPrompt   String @db.Text // User prompt template with {{variables}}

  // Associated template (optional)
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])

  // Prompt configuration
  variables    String[] // Variables used in prompts
  platform     TemplatePlatform
  contentType  String? // "technical", "marketing", "educational"
  tone         String? // "professional", "casual", "friendly"
  targetLength Int? // Target word/character count

  // Metadata
  tags      String[]
  isDefault Boolean  @default(false)
  isPublic  Boolean  @default(false)

  // Version control
  version  Int             @default(1)
  parentId String?
  parent   PromptLibrary?  @relation("PromptVersions", fields: [parentId], references: [id])
  versions PromptLibrary[] @relation("PromptVersions")

  // Effectiveness tracking
  usageCount        Int       @default(0)
  lastUsedAt        DateTime?
  averageRating     Float?
  successRate       Float? // % of successful generations
  averageTokenUsage Int?

  @@index([projectId])
  @@index([userId])
  @@index([category])
  @@index([platform])
  @@index([isDefault])
  @@index([isPublic])
  @@index([templateId])
  @@map("prompt_library")
}

enum PromptCategory {
  TECHNICAL_UPDATE
  FEATURE_ANNOUNCEMENT
  BUG_FIX
  RELEASE_NOTES
  TUTORIAL
  CASE_STUDY
  WEEKLY_DIGEST
  MONTHLY_SUMMARY
  PRODUCT_UPDATE
  COMMUNITY_UPDATE
  CUSTOM
}

// Track content generation history with templates
model ContentTemplateHistory {
  id        String   @id @default(cuid())
  contentId String
  createdAt DateTime @default(now())

  // Template used
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])

  // Prompt used
  promptId String?

  // Generation metadata
  variables Json // Variables substituted: {repository: "...", activity: "..."}
  platform  TemplatePlatform

  // Performance tracking
  generatedContent String  @db.Text
  wasEdited        Boolean @default(false)
  editDistance     Int? // How much was changed from template
  timeToEdit       Int? // Seconds spent editing

  // Effectiveness metrics
  wasPublished    Boolean   @default(false)
  publishedAt     DateTime?
  engagementScore Float? // Clicks, opens, shares, etc.
  userRating      Int? // 1-5 stars

  @@index([templateId])
  @@index([contentId])
  @@index([platform])
  @@index([createdAt])
  @@map("content_template_history")
}

// ============================================
// IMAGE MANAGEMENT
// ============================================

model Image {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Image metadata
  filename     String
  originalName String
  mimeType     String
  size         Int // File size in bytes
  width        Int
  height       Int
  aspectRatio  Float

  // Storage
  storageUrl      String // URL to stored image (Vercel Blob/R2)
  storagePath     String // Storage path/key
  storageProvider String @default("vercel-blob") // vercel-blob, cloudflare-r2, s3

  // Image data
  alt         String? @db.Text
  caption     String? @db.Text
  title       String?
  description String? @db.Text

  // Categorization
  tags       String[]
  categories String[]

  // Generation metadata
  isAIGenerated   Boolean   @default(false)
  aiModel         String? // dall-e-3, stable-diffusion
  aiPrompt        String?   @db.Text
  aiRevisedPrompt String?   @db.Text // DALL-E revised prompt
  aiQuality       String? // standard, hd
  aiStyle         String? // vivid, natural
  generatedAt     DateTime?

  // Platform-specific versions
  platformVersions Json? // Store different sizes/formats per platform

  // Usage tracking
  usageCount Int       @default(0)
  lastUsedAt DateTime?

  // Optimization
  isOptimized  Boolean   @default(false)
  originalSize Int? // Original file size before optimization
  optimizedAt  DateTime?

  // Relations
  contentImages ContentImage[]
  emailImages   EmailImage[]

  @@index([userId])
  @@index([projectId])
  @@index([isAIGenerated])
  @@index([createdAt])
  @@index([tags])
  @@map("images")
}

// Junction table for Content-Image relationship
model ContentImage {
  id        String   @id @default(cuid())
  contentId String
  imageId   String
  createdAt DateTime @default(now())

  // Image role in content
  role ImageRole @default(INLINE)

  // Platform-specific metadata
  platformType PlatformType?
  platformUrl  String? // Platform-specific image URL after upload

  // Position and settings
  position Int? // Order in content
  settings Json? // Platform-specific image settings

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  image   Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([contentId, imageId, role])
  @@index([contentId])
  @@index([imageId])
  @@index([platformType])
  @@map("content_images")
}

enum ImageRole {
  FEATURED // Featured/cover image
  HERO // Hero image
  INLINE // Inline content image
  THUMBNAIL // Thumbnail
  OG_IMAGE // Open Graph image
  TWITTER_CARD // Twitter card image
  EMAIL_HEADER // Email header image
  BANNER // Banner image
}

// Junction table for EmailCampaign-Image relationship
model EmailImage {
  id         String   @id @default(cuid())
  campaignId String
  imageId    String
  createdAt  DateTime @default(now())

  // Image role in email
  role ImageRole @default(EMAIL_HEADER)

  // Position and settings
  position Int?
  settings Json?

  // Relations
  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  image    Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([campaignId, imageId, role])
  @@index([campaignId])
  @@index([imageId])
  @@map("email_images")
}

// Image generation jobs (for tracking batch generation)
model ImageGenerationJob {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Job details
  name        String?
  description String? @db.Text

  // Generation parameters
  prompts String[] // Array of prompts to generate
  model   String   @default("dall-e-3")
  quality String   @default("standard") // standard, hd
  style   String   @default("vivid") // vivid, natural
  size    String   @default("1024x1024") // 1024x1024, 1792x1024, 1024x1792

  // Job status
  status         ImageJobStatus @default(PENDING)
  totalImages    Int            @default(0)
  generatedCount Int            @default(0)
  failedCount    Int            @default(0)

  // Cost tracking
  totalCost Float @default(0)

  // Completion tracking
  startedAt   DateTime?
  completedAt DateTime?

  // Error handling
  errors Json? // Array of error objects

  // Results
  imageIds String[] // Array of generated image IDs

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([createdAt])
  @@map("image_generation_jobs")
}

enum ImageJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// ============================================
// SCHEDULING & QUEUE SYSTEM
// ============================================

// Scheduled content for future publishing
model ScheduledContent {
  id        String   @id @default(cuid())
  contentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Schedule configuration
  scheduledFor DateTime // When to publish (UTC)
  timezone     String   @default("UTC") // IANA timezone for display
  localTime    String? // Human-readable local time (e.g., "2025-01-15 09:00 AM PST")

  // Recurring schedule (optional)
  isRecurring      Boolean   @default(false)
  recurringPattern String? // cron-like pattern or "daily|weekly|monthly"
  recurringConfig  Json? // Additional recurrence config (days of week, etc.)
  recurringUntil   DateTime? // End date for recurring schedule
  lastOccurrence   DateTime? // Track last execution for recurring jobs

  // Publishing configuration
  platforms    String[] // Platform IDs to publish to
  publishDelay Int?     @default(0) // Additional delay in minutes after scheduled time

  // Queue information
  queueStatus  QueueStatus @default(PENDING)
  queuedAt     DateTime? // When added to queue
  processingAt DateTime? // When started processing
  publishedAt  DateTime? // When actually published
  failedAt     DateTime? // When failed

  // Priority and retry
  priority   Int @default(5) // 1-10, higher = more priority
  retryCount Int @default(0)
  maxRetries Int @default(3)
  retryDelay Int @default(300) // Seconds between retries

  // Status and error tracking
  status       ScheduleStatus @default(SCHEDULED)
  error        String?        @db.Text
  errorDetails Json? // Detailed error information

  // Conflict detection
  conflictsWith String[] // IDs of conflicting schedules
  conflictNote  String?  @db.Text

  // Inngest job tracking
  inngestJobId   String? // Inngest scheduled function run ID
  inngestEventId String? // Inngest event ID

  // Metadata
  metadata Json? // Additional scheduling metadata
  notes    String? @db.Text // User notes about this schedule

  // Relationships
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([projectId])
  @@index([scheduledFor])
  @@index([queueStatus])
  @@index([status])
  @@index([priority])
  @@index([timezone])
  @@index([isRecurring])
  @@map("scheduled_content")
}

enum QueueStatus {
  PENDING // Waiting in queue
  QUEUED // Ready for processing
  PROCESSING // Currently being processed
  COMPLETED // Successfully completed
  FAILED // Failed after all retries
  CANCELLED // Manually cancelled
  PAUSED // Temporarily paused
}

enum ScheduleStatus {
  SCHEDULED // Waiting for scheduled time
  ACTIVE // Currently being executed
  PUBLISHED // Successfully published
  FAILED // Failed to publish
  CANCELLED // User cancelled
  EXPIRED // Passed scheduled time without execution
  SKIPPED // Skipped due to conflict or other reason
}

// Queue tracking and analytics
model QueueMetrics {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Time period
  periodStart DateTime
  periodEnd   DateTime

  // Throughput metrics
  totalQueued    Int @default(0)
  totalProcessed Int @default(0)
  totalCompleted Int @default(0)
  totalFailed    Int @default(0)
  totalCancelled Int @default(0)

  // Performance metrics
  avgWaitTime       Int? // Average time in queue (seconds)
  avgProcessingTime Int? // Average processing time (seconds)
  peakQueueLength   Int  @default(0)

  // Success rate
  successRate Float? // Percentage of successful completions

  // Platform breakdown
  platformStats Json? // Stats per platform

  @@index([projectId])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("queue_metrics")
}

// Schedule conflicts tracking
model ScheduleConflict {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Conflicting schedules
  schedule1Id String
  schedule2Id String

  // Conflict details
  conflictType   ConflictType
  conflictTime   DateTime // When the conflict occurs
  conflictReason String       @db.Text

  // Resolution
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  resolution String?   @db.Text // How it was resolved
  resolvedBy String? // User ID who resolved it

  // Severity
  severity ConflictSeverity @default(WARNING)

  @@index([projectId])
  @@index([schedule1Id])
  @@index([schedule2Id])
  @@index([conflictTime])
  @@index([resolved])
  @@map("schedule_conflicts")
}

enum ConflictType {
  SAME_TIME // Both scheduled for exact same time
  OVERLAPPING // Time ranges overlap
  RATE_LIMIT // Would exceed platform rate limits
  RESOURCE // Would exceed resource limits
  CUSTOM // Custom conflict rule
}

enum ConflictSeverity {
  INFO // Just for information
  WARNING // Potential issue, can proceed
  ERROR // Must be resolved before proceeding
  CRITICAL // Blocking issue
}

// ============================================
// REPORTING & EXPORT SYSTEM
// ============================================

// Report configuration for custom reports
model ReportConfig {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Report details
  name        String
  description String? @db.Text

  // Report type and format
  reportType   ReportType
  outputFormat ReportFormat @default(PDF)

  // Report sections and configuration
  sections  String[] // Array of section identifiers
  metrics   String[] // Metrics to include
  charts    String[] // Chart types to include
  dateRange Json? // Custom date range configuration

  // Filters
  platformFilters String[] // Filter by platforms
  contentFilters  Json? // Filter by content type, status, etc.
  customFilters   Json? // Custom filtering logic

  // Scheduling and delivery
  isScheduled     Boolean   @default(false)
  schedulePattern String? // Cron expression
  deliveryMethod  String? // email, download, webhook
  deliveryConfig  Json? // Email addresses, webhook URLs, etc.
  lastGeneratedAt DateTime?
  nextScheduledAt DateTime?

  // Customization
  branding Json? // Logo, colors, fonts
  template String? // Template identifier
  options  Json? // Additional report options

  // Metadata
  isPublic Boolean  @default(false)
  tags     String[]
  category String?

  // Relationships
  history ReportHistory[]

  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([isScheduled])
  @@index([nextScheduledAt])
  @@map("report_configs")
}

enum ReportType {
  EXECUTIVE_SUMMARY // High-level overview
  CONTENT_PERFORMANCE // Content analytics
  COST_ANALYSIS // AI and platform cost tracking
  MONTHLY_DIGEST // Monthly summary
  WEEKLY_DIGEST // Weekly summary
  REPOSITORY_INSIGHTS // GitHub activity analysis
  PUBLISHING_ANALYTICS // Publishing success rates
  PLATFORM_BREAKDOWN // Per-platform analytics
  CUSTOM // User-defined report
}

enum ReportFormat {
  PDF // PDF document
  CSV // CSV export
  JSON // JSON data export
  HTML // HTML report
  ICAL // iCalendar format
  ZIP // Compressed archive
}

// Report generation history and cache
model ReportHistory {
  id        String   @id @default(cuid())
  configId  String?
  projectId String
  userId    String
  createdAt DateTime @default(now())

  // Report metadata
  reportType   ReportType
  outputFormat ReportFormat
  reportName   String
  description  String?      @db.Text

  // Generation details
  generatedAt    DateTime @default(now())
  generationTime Int? // Milliseconds
  dataFrom       DateTime // Start of date range
  dataTo         DateTime // End of date range

  // Storage
  fileUrl   String? // URL to generated file
  filePath  String? // Storage path
  fileSize  Int? // Bytes
  expiresAt DateTime? // For temporary files

  // Content summary
  recordCount    Int? // Number of records included
  platformsCount Int? // Number of platforms
  contentCount   Int? // Number of content items
  summary        Json? // Report summary data

  // Status and errors
  status       ReportStatus @default(PENDING)
  error        String?      @db.Text
  errorDetails Json?

  // Delivery tracking
  deliveredAt    DateTime?
  deliveryMethod String? // email, download, webhook
  deliveryStatus String? // sent, failed, pending
  recipients     Json? // Email recipients or webhook URLs

  // Inngest tracking
  inngestJobId String?

  // Relationships
  config ReportConfig? @relation(fields: [configId], references: [id], onDelete: SetNull)

  @@index([configId])
  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([status])
  @@index([generatedAt])
  @@index([expiresAt])
  @@map("report_history")
}

enum ReportStatus {
  PENDING // Queued for generation
  GENERATING // Currently generating
  COMPLETED // Successfully generated
  FAILED // Generation failed
  EXPIRED // File has expired
  CANCELLED // User cancelled
}

// Email report subscriptions
model EmailReportSubscription {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription details
  reportType   EmailReportType
  frequency    String // daily, weekly, monthly, custom
  deliveryDay  Int? // Day of week (1-7) or month (1-31)
  deliveryTime String          @default("09:00") // HH:MM format
  timezone     String          @default("UTC")

  // Recipients
  recipients   String[] // Email addresses
  ccRecipients String[] // CC email addresses

  // Filters and customization
  includeMetrics  String[] // Metrics to include
  platformFilters String[] // Filter by platforms
  minThreshold    Json? // Only send if metrics meet threshold

  // Status
  isActive        Boolean   @default(true)
  lastSentAt      DateTime?
  nextScheduledAt DateTime?
  sendCount       Int       @default(0)
  errorCount      Int       @default(0)
  lastError       String?   @db.Text

  // Inngest tracking
  inngestScheduleId String?

  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([isActive])
  @@index([nextScheduledAt])
  @@map("email_report_subscriptions")
}

enum EmailReportType {
  WEEKLY_SUMMARY // Weekly content summary
  MONTHLY_DIGEST // Monthly analytics
  BUDGET_ALERT // Cost threshold alerts
  PERFORMANCE_HIGHLIGHTS // Top performing content
  PUBLISHING_FAILURES // Failed publications
  SCHEDULE_CONFLICTS // Scheduling conflicts
  CUSTOM_METRICS // Custom metric report
}

// Export jobs tracking
model ExportJob {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Export configuration
  exportType   ExportType
  outputFormat ReportFormat
  name         String?
  description  String?      @db.Text

  // Export parameters
  dateFrom DateTime?
  dateTo   DateTime?
  filters  Json? // Export filters
  options  Json? // Export options

  // Processing status
  status         ExportStatus @default(PENDING)
  progress       Int          @default(0) // 0-100
  totalRecords   Int?
  processedCount Int          @default(0)
  errorCount     Int          @default(0)

  // Results
  fileUrl   String? // Download URL
  filePath  String? // Storage path
  fileSize  Int? // Bytes
  expiresAt DateTime? // Auto-delete after expiry

  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int? // Milliseconds

  // Error handling
  error        String? @db.Text
  errorDetails Json?

  // Inngest tracking
  inngestJobId String?

  @@index([projectId])
  @@index([userId])
  @@index([exportType])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("export_jobs")
}

enum ExportType {
  CONTENT_HISTORY // All content with metadata
  ANALYTICS_SNAPSHOT // Analytics data
  SCHEDULED_CALENDAR // iCal calendar
  IMAGE_LIBRARY // All images with metadata
  PLATFORM_DATA // Platform-specific data
  FULL_BACKUP // Complete project backup
}

enum ExportStatus {
  PENDING // Queued
  PROCESSING // In progress
  COMPLETED // Successfully completed
  FAILED // Failed
  CANCELLED // User cancelled
  EXPIRED // File expired
}

// ============================================
// REPOSITORY INSIGHTS & ANALYTICS
// ============================================

// Repository insights and analytics
model RepositoryInsights {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Time period for this insight snapshot
  periodStart DateTime
  periodEnd   DateTime
  periodType  InsightPeriod @default(DAILY)

  // Activity metrics
  totalCommits      Int @default(0)
  totalPullRequests Int @default(0)
  totalIssues       Int @default(0)
  totalReleases     Int @default(0)

  // Commit statistics
  commitStats Json? // {additions, deletions, changedFiles, avgCommitSize}

  // Pull request metrics
  prStats Json? // {merged, closed, draft, avgMergeTime, avgReviewTime}

  // Issue metrics
  issueStats Json? // {opened, closed, avgCloseTime, staleIssues}

  // Contributor data
  contributorCount     Int    @default(0)
  topContributors      Json? // Array of {login, commits, prs, avatar}
  contributorDiversity Float? // Diversity score 0-1

  // Language breakdown
  languageStats Json? // {language: lines/percentage}

  // File change analysis
  fileChangeFrequency Json? // {filename: changeCount}
  hotspots            Json? // Most changed files/directories

  // Branch activity
  branchStats Json? // {name, commitCount, lastActivity}

  // Code velocity metrics
  commitVelocity      Float? // Commits per week
  prMergeRate         Float? // PRs merged per week
  issueResolutionRate Float? // Issues closed per week

  // Health score (0-100)
  healthScore   Int?  @default(0)
  healthFactors Json? // Breakdown of health score factors
  healthTrends  Json? // Historical health trend data

  // Newsworthy items (AI-detected)
  newsworthyItems Json? // Array of newsworthy events with scores

  // Activity heatmap data
  heatmapData Json? // Daily activity counts for visualization

  // Cache metadata
  cacheExpiresAt DateTime?
  lastSyncedAt   DateTime?

  @@index([projectId])
  @@index([periodStart, periodEnd])
  @@index([periodType])
  @@index([healthScore])
  @@index([cacheExpiresAt])
  @@map("repository_insights")
}

enum InsightPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

// Detailed contributor statistics
model ContributorStats {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contributor identity
  githubLogin String
  githubId    Int?
  name        String?
  email       String?
  avatarUrl   String?

  // Time period
  periodStart DateTime
  periodEnd   DateTime

  // Contribution counts
  totalCommits  Int @default(0)
  totalPRs      Int @default(0)
  totalIssues   Int @default(0)
  totalReviews  Int @default(0)
  totalReleases Int @default(0)

  // Code statistics
  linesAdded   Int @default(0)
  linesDeleted Int @default(0)
  filesChanged Int @default(0)

  // Engagement metrics
  firstContribution DateTime?
  lastContribution  DateTime?
  activeStreaks     Json? // Array of {start, end, days}
  contributionDays  Int       @default(0) // Unique days with contributions

  // PR metrics
  prsMerged     Int    @default(0)
  prsReviewed   Int    @default(0)
  avgPRSize     Float? // Average lines changed per PR
  avgReviewTime Float? // Average hours to review

  // Issue metrics
  issuesOpened    Int @default(0)
  issuesClosed    Int @default(0)
  issuesCommented Int @default(0)

  // Language expertise
  languageBreakdown Json? // {language: commitCount}

  // Impact score (0-100)
  impactScore   Int?  @default(0)
  impactFactors Json? // Breakdown of impact calculation

  // Activity patterns
  activityByDay    Json? // {Monday: count, ...}
  activityByHour   Json? // {0: count, 1: count, ...}
  peakActivityTime String? // "weekday_morning", "weekend_evening"

  @@unique([projectId, githubLogin, periodStart, periodEnd])
  @@index([projectId])
  @@index([githubLogin])
  @@index([periodStart, periodEnd])
  @@index([impactScore])
  @@map("contributor_stats")
}

// Newsworthy events detection
model NewsworthyEvent {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event details
  eventType   NewsworthyType
  eventDate   DateTime
  title       String
  description String         @db.Text
  htmlUrl     String? // GitHub URL to event

  // Event data (commit SHA, PR number, issue number, etc.)
  eventData Json

  // AI analysis
  newsworthinessScore Float   @default(0) // 0-1 confidence score
  aiReasoning         String  @db.Text // Why AI thinks this is newsworthy
  aiModel             String? // Model used for detection

  // Classification
  category String[] // ["feature", "bugfix", "breaking_change", "security"]
  impact   EventImpact @default(MEDIUM)
  tags     String[]

  // User feedback
  userRating     Int? // 1-5 stars, did user find this useful?
  userDismissed  Boolean @default(false)
  userBookmarked Boolean @default(false)

  // Publication tracking
  wasPublished Boolean   @default(false)
  publishedAt  DateTime?
  publishedTo  String[] // Platform IDs

  @@index([projectId])
  @@index([eventType])
  @@index([eventDate])
  @@index([newsworthinessScore])
  @@index([impact])
  @@index([wasPublished])
  @@map("newsworthy_events")
}

enum NewsworthyType {
  MAJOR_RELEASE // Semantic version bump (1.0 -> 2.0)
  FEATURE_RELEASE // New feature added
  BREAKING_CHANGE // Breaking API/behavior change
  SECURITY_FIX // Security vulnerability fix
  CRITICAL_BUGFIX // High-priority bug fix
  PERFORMANCE_IMPROVEMENT // Significant performance gain
  MILESTONE // Project milestone reached
  FIRST_RELEASE // First ever release
  MAJOR_REFACTOR // Large code refactoring
  DOCUMENTATION // Major documentation update
  COLLABORATION // Notable collaboration/contribution
  CUSTOM // User-defined newsworthy event
}

enum EventImpact {
  CRITICAL // Must announce immediately
  HIGH // Should announce soon
  MEDIUM // Consider announcing
  LOW // Minor, probably skip
}

// ============================================
// CONTENT ANALYTICS & METRICS
// ============================================

// Content generation and publishing metrics
model ContentMetrics {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Time period for these metrics
  periodStart DateTime
  periodEnd   DateTime
  periodType  MetricPeriodType @default(DAILY)

  // Content generation metrics
  totalGenerated        Int    @default(0)
  totalGeneratedTokens  Int    @default(0)
  totalGeneratedCost    Float  @default(0)
  generationSuccessRate Float? // Percentage of successful generations

  // Publishing metrics
  totalPublished     Int    @default(0)
  totalFailed        Int    @default(0)
  totalScheduled     Int    @default(0)
  publishSuccessRate Float? // Percentage of successful publishes

  // Content by type
  blogPosts       Int @default(0)
  emailCampaigns  Int @default(0)
  socialPosts     Int @default(0)
  newslettersSent Int @default(0)

  // Platform breakdown (JSON with platform-specific counts)
  platformBreakdown Json?

  // AI provider breakdown
  openaiGenerations    Int   @default(0)
  anthropicGenerations Int   @default(0)
  openaiTokens         Int   @default(0)
  anthropicTokens      Int   @default(0)
  openaiCost           Float @default(0)
  anthropicCost        Float @default(0)

  // Content velocity
  avgContentPerDay   Float?
  avgContentPerWeek  Float?
  avgContentPerMonth Float?

  // Quality metrics
  avgEditDistance  Float? // How much AI content was edited
  avgTimeToPublish Int? // Average seconds from generation to publish

  @@unique([projectId, periodStart, periodEnd, periodType])
  @@index([projectId])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([periodType])
  @@map("content_metrics")
}

enum MetricPeriodType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

// Platform-specific engagement metrics
model PlatformMetrics {
  id         String   @id @default(cuid())
  projectId  String
  platformId String
  contentId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Time period
  periodStart DateTime
  periodEnd   DateTime

  // Platform type
  platformType PlatformType

  // Engagement metrics (when available from platform APIs)
  views       Int? @default(0)
  likes       Int? @default(0)
  shares      Int? @default(0)
  comments    Int? @default(0)
  clicks      Int? @default(0)
  impressions Int? @default(0)

  // Calculated metrics
  engagementRate   Float? // (likes + shares + comments) / impressions
  clickThroughRate Float? // clicks / impressions

  // Follower/subscriber metrics
  followers      Int?
  subscribers    Int?
  followerGrowth Int? // Net change in followers

  // Platform-specific metrics (JSON for flexibility)
  platformSpecificMetrics Json?

  // Content reference (if tracking specific content performance)
  contentPublicationId String?

  @@index([projectId])
  @@index([platformId])
  @@index([contentId])
  @@index([platformType])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("platform_metrics")
}

// Cost tracking for AI and platform usage
model CostTracking {
  id        String   @id @default(cuid())
  projectId String
  userId    String?
  createdAt DateTime @default(now())

  // Cost details
  service      CostService
  operation    String // e.g., "text_generation", "image_generation", "api_call"
  resourceType String? // e.g., "gpt-4", "dall-e-3", "claude-3-opus"

  // Usage metrics
  tokensUsed      Int? // For AI text generation
  imagesGenerated Int? // For image generation
  apiCalls        Int? // For platform API calls

  // Cost calculation
  unitCost  Float // Cost per unit (token, image, call)
  totalCost Float // Total cost for this operation
  currency  String @default("USD")

  // Additional metadata
  metadata Json? // Store provider-specific details

  // Time period (for aggregation)
  billingPeriod DateTime @default(now()) // Month/day for cost rollup

  @@index([projectId])
  @@index([userId])
  @@index([service])
  @@index([billingPeriod])
  @@index([createdAt])
  @@map("cost_tracking")
}

enum CostService {
  OPENAI_TEXT
  OPENAI_IMAGE
  ANTHROPIC_TEXT
  TWITTER_API
  LINKEDIN_API
  FACEBOOK_API
  REDDIT_API
  MAILCHIMP_API
  SENDGRID_API
  RESEND_API
  MEDIUM_API
  HASHNODE_API
  DEVTO_API
  WORDPRESS_API
  GHOST_API
  VERCEL_BLOB
  CLOUDFLARE_R2
  OTHER
}

// Aggregated cost summaries (for dashboard performance)
model CostSummary {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Time period
  periodStart DateTime
  periodEnd   DateTime
  periodType  MetricPeriodType @default(MONTHLY)

  // Total costs
  totalCost Float  @default(0)
  currency  String @default("USD")

  // Cost by service category
  aiTextCost       Float @default(0)
  aiImageCost      Float @default(0)
  platformApiCost  Float @default(0)
  storageCost      Float @default(0)
  emailServiceCost Float @default(0)

  // Cost by provider
  openaiCost       Float @default(0)
  anthropicCost    Float @default(0)
  vercelCost       Float @default(0)
  resendCost       Float @default(0)
  sendgridCost     Float @default(0)
  mailchimpCost    Float @default(0)
  cloudflareR2Cost Float @default(0)

  // Usage metrics
  totalTokensUsed      Int @default(0)
  totalImagesGenerated Int @default(0)
  totalApiCalls        Int @default(0)

  // Cost per content item
  avgCostPerContent Float?
  avgCostPerPublish Float?

  // Budget tracking
  budgetLimit   Float?
  budgetUsed    Float  @default(0)
  budgetPercent Float? // budgetUsed / budgetLimit * 100

  @@unique([projectId, periodStart, periodEnd, periodType])
  @@index([projectId])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([periodType])
  @@map("cost_summary")
}

// Content performance tracking (best performing content identification)
model ContentPerformance {
  id        String   @id @default(cuid())
  contentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Content reference
  contentTitle String?
  platform     PlatformType

  // Aggregated engagement across all platforms
  totalViews       Int @default(0)
  totalLikes       Int @default(0)
  totalShares      Int @default(0)
  totalComments    Int @default(0)
  totalClicks      Int @default(0)
  totalImpressions Int @default(0)

  // Calculated performance score (weighted combination of metrics)
  performanceScore Float?
  engagementRate   Float?

  // Rankings (updated periodically)
  rankOverall    Int?
  rankInCategory Int?
  rankOnPlatform Int?

  // Time-based performance
  firstDayViews      Int?
  firstWeekViews     Int?
  peakEngagementDate DateTime?

  @@unique([contentId, platform])
  @@index([contentId])
  @@index([projectId])
  @@index([platform])
  @@index([performanceScore])
  @@index([createdAt])
  @@map("content_performance")
}

// Analytics events (granular tracking)
model AnalyticsEvent {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())

  // Event details
  eventType   AnalyticsEventType
  eventName   String
  description String?            @db.Text

  // Associated resources
  userId     String?
  contentId  String?
  platformId String?

  // Event data
  metadata Json?

  // Metrics
  value    Float?
  duration Int? // Milliseconds
  success  Boolean @default(true)
  errorMsg String? @db.Text

  @@index([projectId])
  @@index([eventType])
  @@index([createdAt])
  @@index([userId])
  @@index([contentId])
  @@index([platformId])
  @@map("analytics_events")
}

enum AnalyticsEventType {
  CONTENT_GENERATED
  CONTENT_PUBLISHED
  CONTENT_SCHEDULED
  CONTENT_FAILED
  PLATFORM_CONNECTED
  PLATFORM_DISCONNECTED
  IMAGE_GENERATED
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  API_CALL
  COST_INCURRED
  USER_ACTION
  SYSTEM_EVENT
}

// User activity and session analytics
model UserAnalytics {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  createdAt DateTime @default(now())

  // Session info
  sessionId String?
  ipAddress String?
  userAgent String? @db.Text

  // Activity metrics
  action       String
  resourceType String?
  resourceId   String?

  // Performance
  duration Int? // Milliseconds
  success  Boolean @default(true)

  // Metadata
  metadata Json?

  @@index([userId])
  @@index([projectId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([action])
  @@map("user_analytics")
}

// ============================================
// APPROVAL WORKFLOW & CONTENT SAFETY
// ============================================

// Content approval requests and workflow
model ContentApproval {
  id        String   @id @default(cuid())
  contentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Approval request details
  requestedBy String // User ID who requested approval
  requestedAt DateTime @default(now())

  // Assignment
  assignedTo String[] // User IDs who can approve (empty = all team members)
  assignedAt DateTime?

  // Approval status and workflow
  status   ApprovalStatus   @default(PENDING)
  priority ApprovalPriority @default(MEDIUM)

  // Approval result
  approvedBy String? // User ID who approved/rejected
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  decision   ApprovalDecision?

  // Feedback and comments
  requestNotes String? @db.Text // Notes from requester
  feedback     String? @db.Text // Feedback from approver

  // Escalation
  escalatedAt      DateTime?
  escalatedTo      String? // User ID for escalation
  escalationReason String?   @db.Text

  // Auto-approval rules
  autoApproved     Boolean @default(false)
  autoApprovalRule String? // Rule that triggered auto-approval

  // Audit trail
  history Json? // Array of status changes with timestamps

  // Metadata
  metadata Json?

  // Relationships
  content  Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)
  comments ApprovalComment[]

  @@index([contentId])
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([requestedBy])
  @@index([assignedTo])
  @@index([requestedAt])
  @@index([escalatedAt])
  @@map("content_approvals")
}

enum ApprovalStatus {
  PENDING // Waiting for approval
  IN_REVIEW // Being reviewed
  APPROVED // Approved
  REJECTED // Rejected
  CHANGES_REQUESTED // Changes needed
  ESCALATED // Escalated to higher authority
  CANCELLED // Request cancelled
  EXPIRED // Approval expired
}

enum ApprovalPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApprovalDecision {
  APPROVE
  REJECT
  REQUEST_CHANGES
}

// Comments on approval requests
model ApprovalComment {
  id         String   @id @default(cuid())
  approvalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Comment details
  userId     String
  content    String  @db.Text
  isInternal Boolean @default(false) // Internal note vs public comment

  // Metadata
  mentions String[] // User IDs mentioned in comment
  metadata Json?

  // Relationships
  approval ContentApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)

  @@index([approvalId])
  @@index([userId])
  @@index([createdAt])
  @@map("approval_comments")
}

// Content safety checks and violations
model ContentSafetyCheck {
  id        String   @id @default(cuid())
  contentId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Check details
  checkType    SafetyCheckType
  checkVersion String? // Version of safety rules applied

  // Overall result
  safetyScore Int            @default(100) // 0-100 scale (100 = completely safe)
  passed      Boolean        @default(true)
  severity    SafetySeverity @default(INFO)

  // Violation details
  violations   Json? // Array of {type, category, text, position, severity}
  flaggedTerms String[] // Specific terms that were flagged

  // AI moderation result (if using OpenAI moderation API)
  aiModerationResult Json? // Raw API response
  aiCategories       Json? // {hate, sexual, violence, etc.}

  // Manual review
  reviewedBy   String? // User ID who reviewed
  reviewedAt   DateTime?
  reviewStatus ReviewStatus @default(PENDING)
  reviewNotes  String?      @db.Text

  // Action taken
  action   SafetyAction?
  actionAt DateTime?
  actionBy String? // User ID who took action

  // False positive handling
  isFalsePositive     Boolean @default(false)
  falsePositiveReason String? @db.Text

  // Metadata
  metadata Json?

  // Relationships
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([projectId])
  @@index([checkType])
  @@index([passed])
  @@index([severity])
  @@index([reviewStatus])
  @@index([createdAt])
  @@map("content_safety_checks")
}

enum SafetyCheckType {
  BLACKLIST // Blacklisted terms check
  PROFANITY // Profanity filter
  AI_MODERATION // OpenAI moderation API
  PII // Personal Identifiable Information
  CREDENTIALS // API keys, passwords, etc.
  BRAND_SAFETY // Competitor mentions, inappropriate topics
  COMPLIANCE // GDPR, accessibility, platform policies
  CUSTOM // Custom safety rules
}

enum SafetySeverity {
  INFO // Informational
  WARNING // Warning level
  ERROR // Error level
  CRITICAL // Critical violation
}

enum ReviewStatus {
  PENDING // Awaiting review
  APPROVED // Manually approved despite flags
  REJECTED // Confirmed violation
  WHITELIST_ADDED // Term added to whitelist
}

enum SafetyAction {
  BLOCK // Block publication
  WARN // Warn user but allow
  AUTO_FIX // Automatically fix content
  FLAG_FOR_REVIEW // Flag for manual review
  NONE // No action
}

// Blacklist configuration (global and per-project)
model BlacklistTerm {
  id        String   @id @default(cuid())
  projectId String? // null = global blacklist
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Term details
  term     String
  category BlacklistCategory
  severity SafetySeverity    @default(WARNING)

  // Matching configuration
  isRegex        Boolean @default(false)
  caseSensitive  Boolean @default(false)
  matchWholeWord Boolean @default(false)

  // Action to take
  action SafetyAction @default(WARN)

  // Reason and context
  reason  String? @db.Text
  addedBy String? // User ID

  // Active status
  isActive Boolean @default(true)

  // Usage tracking
  hitCount  Int       @default(0)
  lastHitAt DateTime?

  // Metadata
  metadata Json?

  @@index([projectId])
  @@index([category])
  @@index([severity])
  @@index([isActive])
  @@index([term])
  @@map("blacklist_terms")
}

enum BlacklistCategory {
  PROFANITY
  COMPETITOR
  SENSITIVE
  ILLEGAL
  SPAM
  CUSTOM
}

// Whitelist (exceptions to safety rules)
model WhitelistTerm {
  id        String   @id @default(cuid())
  projectId String? // null = global whitelist
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Term details
  term     String
  category String?

  // Matching configuration
  isRegex       Boolean @default(false)
  caseSensitive Boolean @default(false)

  // Reason
  reason  String? @db.Text
  addedBy String? // User ID

  // Active status
  isActive Boolean @default(true)

  // Metadata
  metadata Json?

  @@index([projectId])
  @@index([isActive])
  @@index([term])
  @@map("whitelist_terms")
}

// Content version history
model ContentVersion {
  id        String   @id @default(cuid())
  contentId String
  projectId String
  createdAt DateTime @default(now())

  // Version metadata
  version      Int // Version number (1, 2, 3, etc.)
  versionLabel String? // Optional label (e.g., "v1.0", "draft", "final")

  // Content snapshot
  title       String
  body        String  @db.Text
  excerpt     String? @db.Text
  rawContent  String  @db.Text
  htmlContent String? @db.Text

  // Content metadata snapshot
  tags       String[]
  categories String[]
  coverImage String?
  metadata   Json? // Other metadata at time of version

  // Version details
  createdBy    String // User ID who created this version
  changeType   VersionChangeType
  changeReason String?           @db.Text // Why this version was created

  // Diff information
  diffSummary Json? // Summary of changes from previous version
  wordCount   Int?
  charCount   Int?

  // Publishing status at time of version
  publishedAt DateTime?
  status      ContentStatus?

  // Branching (for A/B testing)
  branchName      String? // Optional branch name
  parentVersionId String? // Parent version for branching

  // Relationships
  content Content @relation("ContentVersionHistory", fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, version])
  @@index([contentId])
  @@index([projectId])
  @@index([version])
  @@index([createdBy])
  @@index([createdAt])
  @@index([branchName])
  @@map("content_versions")
}

enum VersionChangeType {
  CREATED // Initial creation
  EDITED // Manual edit
  AI_REGENERATED // AI regeneration
  APPROVED // After approval
  REJECTED // After rejection
  AUTO_SAVED // Auto-save
  BRANCHED // A/B test branch
  MERGED // Branch merge
  ROLLBACK // Rolled back to previous version
}

// Team members and roles (for approval workflow)
model TeamMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role and permissions
  role        TeamRole @default(EDITOR)
  permissions Json? // Custom permission overrides

  // Status
  isActive   Boolean   @default(true)
  invitedBy  String? // User ID who invited
  invitedAt  DateTime  @default(now())
  acceptedAt DateTime?

  // Metadata
  metadata Json?

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("team_members")
}

enum TeamRole {
  VIEWER // Can view content
  EDITOR // Can edit content
  REVIEWER // Can review and approve
  ADMIN // Full admin access
  OWNER // Project owner
}

// Auto-approval rules configuration
model AutoApprovalRule {
  id        String   @id @default(cuid())
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Rule details
  name        String
  description String? @db.Text

  // Conditions (all must be met)
  conditions Json // {safetyScore: {min: 80}, contentType: ["blog"], aiGenerated: true}

  // Priority (higher priority rules evaluated first)
  priority Int @default(0)

  // Status
  isActive Boolean @default(true)

  // Usage tracking
  applicationCount Int       @default(0)
  lastAppliedAt    DateTime?

  // Metadata
  metadata Json?

  @@index([projectId])
  @@index([isActive])
  @@index([priority])
  @@map("auto_approval_rules")
}

// ============================================
// ONBOARDING & USER EXPERIENCE
// ============================================

// User onboarding progress tracking
model OnboardingProgress {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Overall progress
  currentStep     Int     @default(1) // Current step (1-8)
  completedSteps  Int[]   @default([]) // Array of completed step numbers
  isCompleted     Boolean @default(false)
  completedAt     DateTime?

  // Step 1: Welcome (auto-completed)
  step1Completed Boolean @default(false)
  step1Data      Json? // Welcome screen interaction data

  // Step 2: GitHub Connection
  step2Completed Boolean @default(false)
  step2Data      Json? // {repoId, repoName, skipped}

  // Step 3: Content Types
  step3Completed Boolean @default(false)
  step3Data      Json? // {selectedTypes: []}

  // Step 4: Brand Voice (3-question quiz)
  step4Completed Boolean @default(false)
  step4Data      Json? // {tone, audience, themes, generatedVoice}

  // Step 5: Platform Connection
  step5Completed Boolean @default(false)
  step5Data      Json? // {platforms: [], skipped}

  // Step 6: Test Content Generation
  step6Completed Boolean @default(false)
  step6Data      Json? // {contentId, accepted}

  // Step 7: Review & Customize
  step7Completed Boolean @default(false)
  step7Data      Json? // {cronSchedule, frequency}

  // Step 8: Setup Complete
  step8Completed Boolean @default(false)
  step8Data      Json? // {tourStarted}

  // Session management
  lastActiveStep Int      @default(1)
  lastActiveAt   DateTime @default(now())
  canResume      Boolean  @default(true)

  // Skip tracking
  skippedSteps Int[] @default([])

  // Tour progress
  tourCompleted     Boolean   @default(false)
  tourStartedAt     DateTime?
  tourCompletedAt   DateTime?
  tourSkippedAt     DateTime?
  tourProgress      Json? // {viewedSteps: [], currentStep}

  // Metadata
  metadata Json? // Additional tracking data

  @@index([userId])
  @@index([isCompleted])
  @@index([currentStep])
  @@index([lastActiveAt])
  @@map("onboarding_progress")
}

// ============================================
// ERROR TRACKING & MONITORING
// ============================================

// Error log model for tracking all application errors
model ErrorLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Error identification
  sentryEventId String?  @unique // Sentry event ID for correlation
  errorHash     String // Hash of error for deduplication
  fingerprint   String[] // Error fingerprint for grouping

  // Error details
  level      ErrorLevel
  message    String     @db.Text
  stackTrace String?    @db.Text
  errorType  String? // Error class name
  errorCode  String? // Application-specific error code

  // Context
  userId      String?
  projectId   String?
  environment String  @default("production") // production, staging, development
  release     String? // Version/release identifier

  // Request context
  url       String? @db.Text
  method    String? // HTTP method
  ipAddress String?
  userAgent String? @db.Text
  requestId String? // Unique request identifier

  // Error metadata
  context     Json? // Additional context data
  tags        String[] // Tags for categorization
  breadcrumbs Json? // User actions leading to error

  // Resolution tracking
  status       ErrorStatus @default(NEW)
  assignedTo   String? // User ID of assigned developer
  resolvedAt   DateTime?
  resolution   String?     @db.Text // Resolution notes
  relatedIssue String? // Link to GitHub issue or ticket

  // Occurrence tracking
  occurrences Int      @default(1)
  firstSeenAt DateTime @default(now())
  lastSeenAt  DateTime @default(now())

  // Notification tracking
  notified   Boolean   @default(false)
  notifiedAt DateTime?

  @@index([errorHash])
  @@index([level])
  @@index([status])
  @@index([userId])
  @@index([projectId])
  @@index([environment])
  @@index([createdAt])
  @@index([lastSeenAt])
  @@index([assignedTo])
  @@map("error_logs")
}

enum ErrorLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
  FATAL
}

enum ErrorStatus {
  NEW // Just discovered
  INVESTIGATING // Being investigated
  IN_PROGRESS // Fix in progress
  RESOLVED // Fixed and deployed
  IGNORED // Intentionally ignored
  WONT_FIX // Decided not to fix
  DUPLICATE // Duplicate of another error
}

// Error pattern detection for recurring issues
model ErrorPattern {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Pattern identification
  name        String
  description String? @db.Text
  errorHash   String  @unique
  pattern     String  @db.Text // Regex or pattern matcher

  // Occurrence tracking
  occurrences Int      @default(0)
  firstSeen   DateTime
  lastSeen    DateTime

  // Auto-recovery
  canAutoRecover Boolean @default(false)
  recoveryCode   String? @db.Text // Code to execute for auto-recovery

  // Alert configuration
  alertThreshold Int       @default(10) // Alert after N occurrences
  alertCooldown  Int       @default(3600) // Cooldown in seconds
  lastAlertAt    DateTime?

  // Status
  isActive Boolean    @default(true)
  severity ErrorLevel @default(ERROR)

  @@index([errorHash])
  @@index([isActive])
  @@index([lastSeen])
  @@map("error_patterns")
}

// ============================================
// TESTING & DRY RUN SYSTEM
// ============================================

// Test run tracking for dry run and validation tests
model TestRun {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Test configuration
  testType    TestRunType
  name        String?
  description String?     @db.Text

  // Test scope
  contentId   String? // If testing specific content
  platformIds String[] // Platforms to test against

  // Test execution
  status      TestRunStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int? // Milliseconds

  // Test results
  passed       Boolean @default(false)
  totalChecks  Int     @default(0)
  passedChecks Int     @default(0)
  failedChecks Int     @default(0)
  warnings     Int     @default(0)

  // Overall summary
  summary         String?  @db.Text
  recommendations String[] // Array of recommended actions

  // Error tracking
  error        String? @db.Text
  errorDetails Json?

  // Metadata
  config   Json? // Test configuration parameters
  metadata Json?

  // Relationships
  validationResults ValidationResult[]
  repositoryDiffs   RepositoryDiff[]
  mockPublications  MockPublication[]
  testReports       TestReport[]

  @@index([projectId])
  @@index([userId])
  @@index([testType])
  @@index([status])
  @@index([contentId])
  @@index([createdAt])
  @@index([completedAt])
  @@map("test_runs")
}

enum TestRunType {
  DRY_RUN // Full dry run without publishing
  VALIDATION_ONLY // Pre-flight validation checks only
  CONNECTIVITY // Platform connectivity test
  CONTENT_GENERATION // AI content generation test
  SCHEDULING // Scheduling simulation
  FULL_FLOW // Complete flow from generation to publish (simulated)
}

enum TestRunStatus {
  PENDING // Queued for execution
  RUNNING // Currently executing
  COMPLETED // Completed successfully
  FAILED // Failed with errors
  CANCELLED // User cancelled
}

// Individual validation check results
model ValidationResult {
  id        String   @id @default(cuid())
  testRunId String
  projectId String
  createdAt DateTime @default(now())

  // Validation details
  validationType ValidationType
  platformId     String? // Platform being validated (if applicable)
  platformType   PlatformType? // Type of platform
  contentId      String? // Content being validated (if applicable)

  // Check result
  passed      Boolean
  severity    ValidationSeverity
  checkName   String
  description String             @db.Text

  // Validation details
  expected   String? @db.Text // What was expected
  actual     String? @db.Text // What was found
  suggestion String? @db.Text // Suggested fix

  // Error details
  errorCode    String?
  errorMessage String? @db.Text
  stackTrace   String? @db.Text

  // Fix information
  autoFixable Boolean   @default(false)
  autoFixCode String?   @db.Text // Code to auto-fix
  fixApplied  Boolean   @default(false)
  fixedAt     DateTime?

  // Metadata
  metadata Json?

  // Relationships
  testRun TestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@index([projectId])
  @@index([validationType])
  @@index([platformId])
  @@index([contentId])
  @@index([passed])
  @@index([severity])
  @@index([createdAt])
  @@map("validation_results")
}

enum ValidationType {
  PLATFORM_CONNECTION // Platform API connectivity
  AUTH_TOKEN // Authentication token validity
  CONTENT_FORMAT // Content format compliance
  CHARACTER_LIMITS // Platform character limit checks
  IMAGE_SIZE // Image size/format validation
  LINK_VALIDITY // URL/link validation
  HASHTAG_CHECK // Hashtag appropriateness
  RATE_LIMIT // Rate limit compliance
  COST_ESTIMATE // Cost estimation validation
  SCHEDULING // Schedule configuration validation
  PROFANITY // Profanity/safety check
  COMPLIANCE // Platform policy compliance
}

enum ValidationSeverity {
  INFO // Informational
  WARNING // Warning (can proceed)
  ERROR // Error (should not proceed)
  CRITICAL // Critical (must fix)
}

// Repository activity diff tracking
model RepositoryDiff {
  id        String   @id @default(cuid())
  testRunId String?
  projectId String
  createdAt DateTime @default(now())

  // Diff period
  fromDate DateTime
  toDate   DateTime
  fromSha  String? // Git SHA at start
  toSha    String? // Git SHA at end

  // Activity summary
  activityType RepositoryActivityType[]
  totalChanges Int                      @default(0)

  // Change details
  newCommits      Int @default(0)
  newPullRequests Int @default(0)
  newIssues       Int @default(0)
  newReleases     Int @default(0)
  newContributors Int @default(0)

  // Commit analysis
  commitStats     Json? // {additions, deletions, files_changed}
  topContributors Json? // [{login, commits}]

  // Content changes
  filesAdded    String[]
  filesModified String[]
  filesDeleted  String[]

  // PR/Issue analysis
  prStats    Json? // {opened, merged, closed}
  issueStats Json? // {opened, closed}

  // Diff visualization data
  diffData Json? // Structured diff for visualization
  heatmap  Json? // Activity heatmap data

  // Newsworthy detection
  newsworthyItems Json? // Array of detected newsworthy events
  highlights      String[] // Key highlights for content generation

  // Cache
  expiresAt DateTime?

  // Metadata
  metadata Json?

  // Relationships
  testRun TestRun? @relation(fields: [testRunId], references: [id], onDelete: SetNull)

  @@index([testRunId])
  @@index([projectId])
  @@index([fromDate, toDate])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("repository_diffs")
}

enum RepositoryActivityType {
  COMMITS
  PULL_REQUESTS
  ISSUES
  RELEASES
  CONTRIBUTORS
  CODE_CHANGES
  MILESTONES
}

// Test report exports
model TestReport {
  id        String   @id @default(cuid())
  testRunId String
  projectId String
  userId    String
  createdAt DateTime @default(now())

  // Report details
  reportType   TestReportType
  reportFormat ReportFormat
  name         String
  description  String?        @db.Text

  // Report generation
  generatedAt    DateTime @default(now())
  generationTime Int? // Milliseconds

  // Storage
  fileUrl   String? // URL to generated file
  filePath  String? // Storage path
  fileSize  Int? // Bytes
  expiresAt DateTime? // Auto-delete after expiry

  // Report summary
  summary     Json? // Report summary data
  recordCount Int? // Number of records included

  // Status
  status ReportStatus @default(PENDING)
  error  String?      @db.Text

  // Delivery
  deliveredAt    DateTime?
  deliveryMethod String? // email, download
  recipients     Json? // Email recipients

  // Metadata
  metadata Json?

  // Relationships
  testRun TestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("test_reports")
}

enum TestReportType {
  DRY_RUN_SUMMARY // Dry run summary report
  VALIDATION_REPORT // Validation results report
  DIFF_REPORT // Repository diff report
  COMPREHENSIVE // Comprehensive test report
  EXECUTIVE // Executive summary
}

// Mock publication records for dry run
model MockPublication {
  id         String   @id @default(cuid())
  testRunId  String
  contentId  String
  platformId String
  projectId  String
  createdAt  DateTime @default(now())

  // Simulated publication details
  platformType PlatformType
  platformName String

  // What would have been published
  simulatedTitle   String
  simulatedBody    String  @db.Text
  simulatedExcerpt String? @db.Text
  simulatedImages  Json? // Image URLs that would be used

  // Validation result
  wouldSucceed  Boolean
  estimatedTime Int? // Estimated publish time (ms)
  estimatedCost Float? // Estimated cost (if applicable)

  // Issues found
  errors   String[] // Array of error messages
  warnings String[] // Array of warning messages

  // Platform response simulation
  simulatedResponse Json? // Mock API response
  simulatedUrl      String? // URL where content would appear

  // Character count analysis
  titleLength   Int?
  bodyLength    Int?
  exceedsLimits Boolean @default(false)

  // Metadata
  metadata Json?

  // Relationships
  testRun TestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@index([contentId])
  @@index([platformId])
  @@index([projectId])
  @@index([platformType])
  @@index([wouldSucceed])
  @@index([createdAt])
  @@map("mock_publications")
}

// ============================================
// MONITORING AND PERFORMANCE TRACKING
// ============================================

// Job performance metrics
model JobMetrics {
  id               String   @id @default(cuid())
  jobId            String   @unique
  totalExecutions  Int      @default(0)
  successCount     Int      @default(0)
  failureCount     Int      @default(0)
  totalDurationMs  BigInt   @default(0)
  minDurationMs    Int      @default(0)
  maxDurationMs    Int      @default(0)
  lastExecutionAt  DateTime?
  lastSuccessAt    DateTime?
  lastFailureAt    DateTime?
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([jobId])
  @@index([lastExecutionAt])
  @@map("job_metrics")
}

// Performance baselines for regression detection
model PerformanceBaseline {
  id             String   @id @default(cuid())
  jobId          String   @unique
  baselineAvgMs  Float
  baselineP95Ms  Float
  sampleSize     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([jobId])
  @@map("performance_baselines")
}

// Dead letter queue for failed jobs
model DeadLetterQueue {
  id             String   @id @default(cuid())
  jobId          String
  eventData      Json
  error          String
  metadata       Json     @default("{}")
  status         String   @default("PENDING") // PENDING, PROCESSING, SUCCEEDED, FAILED
  attempts       Int      @default(0)
  lastAttemptAt  DateTime?
  processedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@map("dead_letter_queue")
}

// Alert tracking
model Alert {
  id         String   @id @default(cuid())
  type       String
  severity   String
  title      String
  message    String   @db.Text
  metadata   Json     @default("{}")
  resolved   Boolean  @default(false)
  resolvedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@map("alerts")
}
